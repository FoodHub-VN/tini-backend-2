/// <reference types="multer" />
import { Enterprise, EnterpriseModel } from "../database/model/enterprise.model";
import { Observable } from "rxjs";
import { EnterpriseRegisterDto } from "./dto/enterprise-register.dto";
import { EnterPriseNewServiceDataDto } from "./dto/enterprise-new-service.dto";
import { Service, ServiceModel } from "../database/model/service.model";
import { AuthenticatedRequest } from "../auth/interface/authenticated-request.interface";
import { EnterprisePrincipal } from "../auth/interface/enterprise-principal";
import { BServiceService } from "../b-service/b-service.service";
import { Notification, NotificationModel } from "../database/model/notification.model";
import { ScheduleModel } from "../database/model/schedule";
import { NotificationGateway } from "../notification/notification.gateway";
import { ScheduleHistoryModel } from "../database/model/schedule-history.model";
import { FileUploaded } from "../upload/interface/upload.interface";
import { FileUploadService } from "../upload/upload.service";
import { EnterpriseEditDto } from "./dto/enterprise-edit.dto";
import { UserModel } from "../database/model/user.model";
import { ConfigService } from "@nestjs/config";
import { PurchaseTempModel } from "../database/model/purchase-temp";
import { PurchaseModel } from "../database/model/purchase-history.model";
export declare class EnterpriseService {
    private enterpriseModel;
    private serviceModel;
    private bService;
    private req;
    private notiModel;
    private scheduleModel;
    private scheduleHistoryModel;
    private userModel;
    private uploadService;
    private notiSocket;
    private readonly configService;
    private purchaseTempModel;
    private purchaseModel;
    private premiumConfig;
    constructor(enterpriseModel: EnterpriseModel, serviceModel: ServiceModel, bService: BServiceService, req: AuthenticatedRequest<EnterprisePrincipal>, notiModel: NotificationModel, scheduleModel: ScheduleModel, scheduleHistoryModel: ScheduleHistoryModel, userModel: UserModel, uploadService: FileUploadService, notiSocket: NotificationGateway, configService: ConfigService, purchaseTempModel: PurchaseTempModel, purchaseModel: PurchaseModel);
    findEnterpriseByName(name: string): Observable<Enterprise>;
    findEnterpriseWithPassByName(name: string): Observable<Enterprise>;
    existEnterpriseByName(name: string): Observable<boolean>;
    existEnterpriseByMail(mail: string): Observable<boolean>;
    register(data: EnterpriseRegisterDto): Observable<Enterprise>;
    createNewService(data: EnterPriseNewServiceDataDto, images: Array<Express.Multer.File> | undefined): Observable<any>;
    getInfo(): Observable<Enterprise>;
    getAllService(): Observable<Service[]>;
    getAllNotifications(): Promise<Notification[]>;
    readNoti(notiId: string): Promise<any>;
    readAllNoti(): Promise<any>;
    buyPremium(enterprise: string, idOffer: string, transactionNo: string): Promise<boolean>;
    getSchedules(): Promise<any>;
    deleteSchedule(id: string): Promise<any>;
    doneSchedule(id: string): Promise<any>;
    uploadAvatar(file: Express.Multer.File): Observable<FileUploaded>;
    updateProfile(data: EnterpriseEditDto): Promise<Enterprise>;
    getOverviewAnalysis(): Promise<any>;
    getPaymentUrl(offerId: string): Promise<any>;
    handleConfirmTransaction(amount: number, transactionNo: string, responseCode: string, orderId: string): Promise<any>;
    handleConfirmTransactionFromClient(amount: number, transactionNo: string, responseCode: string, orderId: string): Promise<any>;
}
